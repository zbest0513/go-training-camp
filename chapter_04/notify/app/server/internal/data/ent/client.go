// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"notify-server/internal/data/ent/migrate"

	"notify-server/internal/data/ent/tag"
	"notify-server/internal/data/ent/template"
	"notify-server/internal/data/ent/templatetagrelation"
	"notify-server/internal/data/ent/user"
	"notify-server/internal/data/ent/usertagrelation"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Template is the client for interacting with the Template builders.
	Template *TemplateClient
	// TemplateTagRelation is the client for interacting with the TemplateTagRelation builders.
	TemplateTagRelation *TemplateTagRelationClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserTagRelation is the client for interacting with the UserTagRelation builders.
	UserTagRelation *UserTagRelationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Tag = NewTagClient(c.config)
	c.Template = NewTemplateClient(c.config)
	c.TemplateTagRelation = NewTemplateTagRelationClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserTagRelation = NewUserTagRelationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Tag:                 NewTagClient(cfg),
		Template:            NewTemplateClient(cfg),
		TemplateTagRelation: NewTemplateTagRelationClient(cfg),
		User:                NewUserClient(cfg),
		UserTagRelation:     NewUserTagRelationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:              cfg,
		Tag:                 NewTagClient(cfg),
		Template:            NewTemplateClient(cfg),
		TemplateTagRelation: NewTemplateTagRelationClient(cfg),
		User:                NewUserClient(cfg),
		UserTagRelation:     NewUserTagRelationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Tag.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Tag.Use(hooks...)
	c.Template.Use(hooks...)
	c.TemplateTagRelation.Use(hooks...)
	c.User.Use(hooks...)
	c.UserTagRelation.Use(hooks...)
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// TemplateClient is a client for the Template schema.
type TemplateClient struct {
	config
}

// NewTemplateClient returns a client for the Template from the given config.
func NewTemplateClient(c config) *TemplateClient {
	return &TemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `template.Hooks(f(g(h())))`.
func (c *TemplateClient) Use(hooks ...Hook) {
	c.hooks.Template = append(c.hooks.Template, hooks...)
}

// Create returns a create builder for Template.
func (c *TemplateClient) Create() *TemplateCreate {
	mutation := newTemplateMutation(c.config, OpCreate)
	return &TemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Template entities.
func (c *TemplateClient) CreateBulk(builders ...*TemplateCreate) *TemplateCreateBulk {
	return &TemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Template.
func (c *TemplateClient) Update() *TemplateUpdate {
	mutation := newTemplateMutation(c.config, OpUpdate)
	return &TemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateClient) UpdateOne(t *Template) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplate(t))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateClient) UpdateOneID(id int) *TemplateUpdateOne {
	mutation := newTemplateMutation(c.config, OpUpdateOne, withTemplateID(id))
	return &TemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Template.
func (c *TemplateClient) Delete() *TemplateDelete {
	mutation := newTemplateMutation(c.config, OpDelete)
	return &TemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemplateClient) DeleteOne(t *Template) *TemplateDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemplateClient) DeleteOneID(id int) *TemplateDeleteOne {
	builder := c.Delete().Where(template.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateDeleteOne{builder}
}

// Query returns a query builder for Template.
func (c *TemplateClient) Query() *TemplateQuery {
	return &TemplateQuery{
		config: c.config,
	}
}

// Get returns a Template entity by its id.
func (c *TemplateClient) Get(ctx context.Context, id int) (*Template, error) {
	return c.Query().Where(template.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateClient) GetX(ctx context.Context, id int) *Template {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TemplateClient) Hooks() []Hook {
	return c.hooks.Template
}

// TemplateTagRelationClient is a client for the TemplateTagRelation schema.
type TemplateTagRelationClient struct {
	config
}

// NewTemplateTagRelationClient returns a client for the TemplateTagRelation from the given config.
func NewTemplateTagRelationClient(c config) *TemplateTagRelationClient {
	return &TemplateTagRelationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `templatetagrelation.Hooks(f(g(h())))`.
func (c *TemplateTagRelationClient) Use(hooks ...Hook) {
	c.hooks.TemplateTagRelation = append(c.hooks.TemplateTagRelation, hooks...)
}

// Create returns a create builder for TemplateTagRelation.
func (c *TemplateTagRelationClient) Create() *TemplateTagRelationCreate {
	mutation := newTemplateTagRelationMutation(c.config, OpCreate)
	return &TemplateTagRelationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TemplateTagRelation entities.
func (c *TemplateTagRelationClient) CreateBulk(builders ...*TemplateTagRelationCreate) *TemplateTagRelationCreateBulk {
	return &TemplateTagRelationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TemplateTagRelation.
func (c *TemplateTagRelationClient) Update() *TemplateTagRelationUpdate {
	mutation := newTemplateTagRelationMutation(c.config, OpUpdate)
	return &TemplateTagRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TemplateTagRelationClient) UpdateOne(ttr *TemplateTagRelation) *TemplateTagRelationUpdateOne {
	mutation := newTemplateTagRelationMutation(c.config, OpUpdateOne, withTemplateTagRelation(ttr))
	return &TemplateTagRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TemplateTagRelationClient) UpdateOneID(id int) *TemplateTagRelationUpdateOne {
	mutation := newTemplateTagRelationMutation(c.config, OpUpdateOne, withTemplateTagRelationID(id))
	return &TemplateTagRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TemplateTagRelation.
func (c *TemplateTagRelationClient) Delete() *TemplateTagRelationDelete {
	mutation := newTemplateTagRelationMutation(c.config, OpDelete)
	return &TemplateTagRelationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TemplateTagRelationClient) DeleteOne(ttr *TemplateTagRelation) *TemplateTagRelationDeleteOne {
	return c.DeleteOneID(ttr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TemplateTagRelationClient) DeleteOneID(id int) *TemplateTagRelationDeleteOne {
	builder := c.Delete().Where(templatetagrelation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TemplateTagRelationDeleteOne{builder}
}

// Query returns a query builder for TemplateTagRelation.
func (c *TemplateTagRelationClient) Query() *TemplateTagRelationQuery {
	return &TemplateTagRelationQuery{
		config: c.config,
	}
}

// Get returns a TemplateTagRelation entity by its id.
func (c *TemplateTagRelationClient) Get(ctx context.Context, id int) (*TemplateTagRelation, error) {
	return c.Query().Where(templatetagrelation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TemplateTagRelationClient) GetX(ctx context.Context, id int) *TemplateTagRelation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TemplateTagRelationClient) Hooks() []Hook {
	return c.hooks.TemplateTagRelation
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserTagRelationClient is a client for the UserTagRelation schema.
type UserTagRelationClient struct {
	config
}

// NewUserTagRelationClient returns a client for the UserTagRelation from the given config.
func NewUserTagRelationClient(c config) *UserTagRelationClient {
	return &UserTagRelationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertagrelation.Hooks(f(g(h())))`.
func (c *UserTagRelationClient) Use(hooks ...Hook) {
	c.hooks.UserTagRelation = append(c.hooks.UserTagRelation, hooks...)
}

// Create returns a create builder for UserTagRelation.
func (c *UserTagRelationClient) Create() *UserTagRelationCreate {
	mutation := newUserTagRelationMutation(c.config, OpCreate)
	return &UserTagRelationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserTagRelation entities.
func (c *UserTagRelationClient) CreateBulk(builders ...*UserTagRelationCreate) *UserTagRelationCreateBulk {
	return &UserTagRelationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserTagRelation.
func (c *UserTagRelationClient) Update() *UserTagRelationUpdate {
	mutation := newUserTagRelationMutation(c.config, OpUpdate)
	return &UserTagRelationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTagRelationClient) UpdateOne(utr *UserTagRelation) *UserTagRelationUpdateOne {
	mutation := newUserTagRelationMutation(c.config, OpUpdateOne, withUserTagRelation(utr))
	return &UserTagRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserTagRelationClient) UpdateOneID(id int) *UserTagRelationUpdateOne {
	mutation := newUserTagRelationMutation(c.config, OpUpdateOne, withUserTagRelationID(id))
	return &UserTagRelationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserTagRelation.
func (c *UserTagRelationClient) Delete() *UserTagRelationDelete {
	mutation := newUserTagRelationMutation(c.config, OpDelete)
	return &UserTagRelationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserTagRelationClient) DeleteOne(utr *UserTagRelation) *UserTagRelationDeleteOne {
	return c.DeleteOneID(utr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserTagRelationClient) DeleteOneID(id int) *UserTagRelationDeleteOne {
	builder := c.Delete().Where(usertagrelation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserTagRelationDeleteOne{builder}
}

// Query returns a query builder for UserTagRelation.
func (c *UserTagRelationClient) Query() *UserTagRelationQuery {
	return &UserTagRelationQuery{
		config: c.config,
	}
}

// Get returns a UserTagRelation entity by its id.
func (c *UserTagRelationClient) Get(ctx context.Context, id int) (*UserTagRelation, error) {
	return c.Query().Where(usertagrelation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserTagRelationClient) GetX(ctx context.Context, id int) *UserTagRelation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserTagRelationClient) Hooks() []Hook {
	return c.hooks.UserTagRelation
}
