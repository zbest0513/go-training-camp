// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notify-server/internal/data/ent/templatetagrelation"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemplateTagRelationCreate is the builder for creating a TemplateTagRelation entity.
type TemplateTagRelationCreate struct {
	config
	mutation *TemplateTagRelationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ttrc *TemplateTagRelationCreate) SetCreatedAt(t time.Time) *TemplateTagRelationCreate {
	ttrc.mutation.SetCreatedAt(t)
	return ttrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ttrc *TemplateTagRelationCreate) SetNillableCreatedAt(t *time.Time) *TemplateTagRelationCreate {
	if t != nil {
		ttrc.SetCreatedAt(*t)
	}
	return ttrc
}

// SetUpdatedAt sets the "updated_at" field.
func (ttrc *TemplateTagRelationCreate) SetUpdatedAt(t time.Time) *TemplateTagRelationCreate {
	ttrc.mutation.SetUpdatedAt(t)
	return ttrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ttrc *TemplateTagRelationCreate) SetNillableUpdatedAt(t *time.Time) *TemplateTagRelationCreate {
	if t != nil {
		ttrc.SetUpdatedAt(*t)
	}
	return ttrc
}

// SetTemplateUUID sets the "template_uuid" field.
func (ttrc *TemplateTagRelationCreate) SetTemplateUUID(s string) *TemplateTagRelationCreate {
	ttrc.mutation.SetTemplateUUID(s)
	return ttrc
}

// SetNillableTemplateUUID sets the "template_uuid" field if the given value is not nil.
func (ttrc *TemplateTagRelationCreate) SetNillableTemplateUUID(s *string) *TemplateTagRelationCreate {
	if s != nil {
		ttrc.SetTemplateUUID(*s)
	}
	return ttrc
}

// SetTagUUID sets the "tag_uuid" field.
func (ttrc *TemplateTagRelationCreate) SetTagUUID(s string) *TemplateTagRelationCreate {
	ttrc.mutation.SetTagUUID(s)
	return ttrc
}

// SetNillableTagUUID sets the "tag_uuid" field if the given value is not nil.
func (ttrc *TemplateTagRelationCreate) SetNillableTagUUID(s *string) *TemplateTagRelationCreate {
	if s != nil {
		ttrc.SetTagUUID(*s)
	}
	return ttrc
}

// SetStatus sets the "status" field.
func (ttrc *TemplateTagRelationCreate) SetStatus(i int) *TemplateTagRelationCreate {
	ttrc.mutation.SetStatus(i)
	return ttrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ttrc *TemplateTagRelationCreate) SetNillableStatus(i *int) *TemplateTagRelationCreate {
	if i != nil {
		ttrc.SetStatus(*i)
	}
	return ttrc
}

// Mutation returns the TemplateTagRelationMutation object of the builder.
func (ttrc *TemplateTagRelationCreate) Mutation() *TemplateTagRelationMutation {
	return ttrc.mutation
}

// Save creates the TemplateTagRelation in the database.
func (ttrc *TemplateTagRelationCreate) Save(ctx context.Context) (*TemplateTagRelation, error) {
	var (
		err  error
		node *TemplateTagRelation
	)
	ttrc.defaults()
	if len(ttrc.hooks) == 0 {
		if err = ttrc.check(); err != nil {
			return nil, err
		}
		node, err = ttrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TemplateTagRelationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttrc.check(); err != nil {
				return nil, err
			}
			ttrc.mutation = mutation
			if node, err = ttrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttrc.hooks) - 1; i >= 0; i-- {
			if ttrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttrc *TemplateTagRelationCreate) SaveX(ctx context.Context) *TemplateTagRelation {
	v, err := ttrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttrc *TemplateTagRelationCreate) Exec(ctx context.Context) error {
	_, err := ttrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttrc *TemplateTagRelationCreate) ExecX(ctx context.Context) {
	if err := ttrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttrc *TemplateTagRelationCreate) defaults() {
	if _, ok := ttrc.mutation.CreatedAt(); !ok {
		v := templatetagrelation.DefaultCreatedAt()
		ttrc.mutation.SetCreatedAt(v)
	}
	if _, ok := ttrc.mutation.UpdatedAt(); !ok {
		v := templatetagrelation.DefaultUpdatedAt()
		ttrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ttrc.mutation.Status(); !ok {
		v := templatetagrelation.DefaultStatus
		ttrc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttrc *TemplateTagRelationCreate) check() error {
	if _, ok := ttrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ttrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if v, ok := ttrc.mutation.TemplateUUID(); ok {
		if err := templatetagrelation.TemplateUUIDValidator(v); err != nil {
			return &ValidationError{Name: "template_uuid", err: fmt.Errorf(`ent: validator failed for field "template_uuid": %w`, err)}
		}
	}
	if v, ok := ttrc.mutation.TagUUID(); ok {
		if err := templatetagrelation.TagUUIDValidator(v); err != nil {
			return &ValidationError{Name: "tag_uuid", err: fmt.Errorf(`ent: validator failed for field "tag_uuid": %w`, err)}
		}
	}
	if _, ok := ttrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := ttrc.mutation.Status(); ok {
		if err := templatetagrelation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	return nil
}

func (ttrc *TemplateTagRelationCreate) sqlSave(ctx context.Context) (*TemplateTagRelation, error) {
	_node, _spec := ttrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ttrc *TemplateTagRelationCreate) createSpec() (*TemplateTagRelation, *sqlgraph.CreateSpec) {
	var (
		_node = &TemplateTagRelation{config: ttrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: templatetagrelation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: templatetagrelation.FieldID,
			},
		}
	)
	if value, ok := ttrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatetagrelation.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ttrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: templatetagrelation.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ttrc.mutation.TemplateUUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatetagrelation.FieldTemplateUUID,
		})
		_node.TemplateUUID = &value
	}
	if value, ok := ttrc.mutation.TagUUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: templatetagrelation.FieldTagUUID,
		})
		_node.TagUUID = &value
	}
	if value, ok := ttrc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: templatetagrelation.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// TemplateTagRelationCreateBulk is the builder for creating many TemplateTagRelation entities in bulk.
type TemplateTagRelationCreateBulk struct {
	config
	builders []*TemplateTagRelationCreate
}

// Save creates the TemplateTagRelation entities in the database.
func (ttrcb *TemplateTagRelationCreateBulk) Save(ctx context.Context) ([]*TemplateTagRelation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttrcb.builders))
	nodes := make([]*TemplateTagRelation, len(ttrcb.builders))
	mutators := make([]Mutator, len(ttrcb.builders))
	for i := range ttrcb.builders {
		func(i int, root context.Context) {
			builder := ttrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplateTagRelationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttrcb *TemplateTagRelationCreateBulk) SaveX(ctx context.Context) []*TemplateTagRelation {
	v, err := ttrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttrcb *TemplateTagRelationCreateBulk) Exec(ctx context.Context) error {
	_, err := ttrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttrcb *TemplateTagRelationCreateBulk) ExecX(ctx context.Context) {
	if err := ttrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
